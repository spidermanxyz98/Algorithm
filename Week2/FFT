#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 27 21:32:57 2016

@author: xinlin
"""

#the length of the input arrary is n (suppose n is the power of 2), 
#w is the nth root of 1

import numpy as np
import cmath
import time


#the input a has not to be complex type, becuase when compute odd1+even, even
#changes its type to complex. But the result has to be complex, since you cannot
#assign a complex value to a float value
def fft(a,w):
    n=a.shape[0]
    result=np.empty(n,dtype=np.complex64)
    
    if n==1:
        result=a
        return(result)
    else:
        even=fft(a[0::2],w**2)
        odd=fft(a[1::2],w**2)
        
        odd=np.asarray([(w**i)*odd[i] for i in np.arange(int(n/2))])
        
        result[0:int(n/2)]=even + odd
        result[int(n/2):n]=even -odd
    
    return(result)
    
#calculate by def.
def ft(a,w):
    n=a.shape[0]
    w_vect=np.asarray([w**i for i in np.arange(n)])
    A=np.vander(w_vect,increasing=True)
    
    return(np.dot(A,a))
    
    
    
    
n=3

test=np.random.random(2**n)
w=cmath.exp(2*cmath.pi*1j/(2**n))

start_time=time.time()
result_fft=fft(test,w)
#print('time for fft is',(n,time.time()-start_time))
print(result_fft)

#np fft is soooo fast!
start_time=time.time()
result_ft=np.fft.fft(test)
#print('time for ft is', (n,time.time()-start_time))
print(result_ft)